name: CI Build for macOS (x86_64 and arm64)

on:
  push:  # Automatically triggered for pushes
  pull_request:  # Automatically triggered for pull requests
  workflow_dispatch:  # Manually triggered via the GitHub Actions UI

jobs:
  build:
    name: Build on macOS ${{ matrix.arch }}

    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest]
        arch: [arm64, x86_64]  # Support both architectures (Apple Silicon + Rosetta for x86_64)

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install Rosetta 2 if running on Apple Silicon and building for x86_64
      - name: Install Rosetta 2 (if needed for x86_64)
        if: runner.os == 'macOS' && matrix.arch == 'x86_64'
        run: |
          softwareupdate --install-rosetta --agree-to-license || echo "Rosetta 2 already installed"

      - name: Set architecture for build
        run: |
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            export ARCH_CMD="arch -x86_64"
          else
            export ARCH_CMD=""
          fi
          echo "ARCH_CMD=$ARCH_CMD" >> $GITHUB_ENV

      - name: Install Homebrew
        run: |
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"  # Apple Silicon Homebrew path
          else
            eval "$(/usr/local/bin/brew shellenv)"    # x86_64 Homebrew path (via Rosetta)
          fi

      - name: Install dependencies with Homebrew
        run: |
          brew install cmake pkg-config sdl12-compat sdl_gfx yaml-cpp ccache

      # Manually download and build SDL_image using autotools
      - name: Download and install SDL_image
        run: |
          curl -LO https://www.libsdl.org/projects/SDL_image/release/SDL_image-1.2.12.tar.gz
          tar -xzf SDL_image-1.2.12.tar.gz
          cd SDL_image-1.2.12
          ./configure --prefix=$(brew --prefix sdl12-compat)  # Ensure SDL is found and installed in the correct path
          make -j$(sysctl -n hw.ncpu)
          sudo make install  # Install system-wide

      # Manually download and build SDL_mixer using autotools
      - name: Download and install SDL_mixer
        run: |
          curl -LO https://www.libsdl.org/projects/SDL_mixer/release/SDL_mixer-1.2.12.tar.gz
          tar -xzf SDL_mixer-1.2.12.tar.gz
          cd SDL_mixer-1.2.12
          ./configure --prefix=$(brew --prefix sdl12-compat)  # Ensure SDL is found and installed in the correct path
          make -j$(sysctl -n hw.ncpu)
          sudo make install  # Install system-wide

      - name: Ensure pkg-config can find SDL dependencies
        run: |
          export PKG_CONFIG_PATH=$(brew --prefix sdl12-compat)/lib/pkgconfig:$PKG_CONFIG_PATH
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Generate project files with CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DPKG_CONFIG_EXECUTABLE=$(brew --prefix pkg-config)/bin/pkg-config

      - name: Link Homebrew libs in PostprocessBundle.cmake
        run: |
          FIND='fixup_bundle("${BUNDLE_PATH}" "${BUNDLE_LIBS}" "")'
          REPLACE='fixup_bundle("${BUNDLE_PATH}" "${BUNDLE_LIBS}" "'$(brew --prefix)'/lib")'
          sed -i '' "s,$FIND,$REPLACE," cmake/modules/PostprocessBundle.cmake

      - name: Copy SDL2 to bundle
        run: |
          mkdir -p build/openxcom.app/Contents/Frameworks/
          libSDL2=`brew info SDL2 | grep Cellar | awk '{print $1}'`
          cp $libSDL2/lib/libSDL2-2.0.0.dylib build/openxcom.app/Contents/Frameworks

      - name: Build the project
        run: |
          cmake --build build --parallel $(( $(sysctl -n hw.ncpu) - 1 ))

      - name: Copy libraries to bundle
        run: |
          mkdir -p build/openxcom.app/Contents/Frameworks/
          cp $(brew --prefix flac)/lib/libFLAC.12.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix jpeg)/lib/libjpeg.8.3.2.dylib build/openxcom.app/Contents/Frameworks
          ln -s libjpeg.8.3.2.dylib build/openxcom.app/Contents/Frameworks/libjpeg.8.dylib
          cp $(brew --prefix xz)/lib/liblzma.5.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix mikmod)/lib/libmikmod.3.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix libogg)/lib/libogg.0.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix libpng)/lib/libpng16.16.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix sdl_gfx)/lib/libSDL_gfx.15.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix sdl_image)/lib/libSDL_image-1.2.0.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix sdl_mixer)/lib/libSDL_mixer-1.2.0.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix sdl12-compat)/lib/libSDL-1.2.0.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix sdl2)/lib/libSDL2-2.0.0.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix libsharpyuv)/lib/libsharpyuv.0.1.0.dylib build/openxcom.app/Contents/Frameworks
          ln -s libsharpyuv.0.1.0.dylib build/openxcom.app/Contents/Frameworks/libsharpyuv.0.dylib
          cp $(brew --prefix libtiff)/lib/libtiff.6.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix libvorbis)/lib/libvorbis.0.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix libvorbis)/lib/libvorbisfile.3.dylib build/openxcom.app/Contents/Frameworks
          cp $(brew --prefix libwebp)/lib/libwebp.7.1.9.dylib build/openxcom.app/Contents/Frameworks
          ln -s libwebp.7.1.9.dylib build/openxcom.app/Contents/Frameworks/libwebp.7.dylib
          cp $(brew --prefix yaml-cpp)/lib/libyaml-cpp.0.8.0.dylib build/openxcom.app/Contents/Frameworks
          ln -s libyaml-cpp.0.8.0.dylib build/openxcom.app/Contents/Frameworks/libyaml-cpp.0.8.dylib
          cp $(brew --prefix zstd)/lib/libzstd.1.5.6.dylib build/openxcom.app/Contents/Frameworks
          ln -s libzstd.1.5.6.dylib build/openxcom.app/Contents/Frameworks/libzstd.1.dylib
#if the above works I'll laugh so hard

      - name: Fix, sign, and package the app
        run: |
          sudo xattr -cr build/openxcom.app
          codesign --force --deep --sign - build/openxcom.app
          cd build
          zip -r openxcom.zip openxcom.app

      - name: Archive built artifacts
        uses: actions/upload-artifact@v3
        with:
          name: openxcom_${{ matrix.arch }}
          path: build/openxcom.zip

      - name: ccache stats
        run: ccache -s --max-size=390MB
